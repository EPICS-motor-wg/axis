The DLY-STOP problem
  When the motor is stopped, while in the DLY phase, the record may hang,
  when the readback position doesn't change and the record is not processed.
  http://www.aps.anl.gov/epics/tech-talk/2015/msg01786.php
  fixed in commit 4b9e535abcfd3944587b91b082f855e9e00a081f,
  "Record: motor record DLY and STOP problem"
  
Synchronization of RBV and VAL at IOC start
  Should be done on startup, but is not always working with
  an asyn motor (when the connection is not yet established,
  and the record is processd the first time)
  This is, what I can see, a bug.
  
Motor stopped when problem reported.
  Some controllers need this to protect HW.
  Some controllers do not want this, as the stop() will make the
  problem go away, which is bad, when the problem needs to be analyzed.
  
  Solution: the driver can disable (or enable) this feature:
  setIntegerParam(pC_->motorFlagsStopOnProblem_, 0);

Motor done, when hitting a limit switch.
  This is not true, when we home against a limit switch,
  or if we go to a limit switch and then back to the home switch.
  Solution:
  setIntegerParam(pC_->motorFlagsHomeOnLs_, 1);
  
Homing when sitting on a limit switch.
  Today:
  When the high limit switch is hit, writing 1 to HOMF does nothing.
  Espcecially recGblFwdLink(pmr) is not called.
  This is a bug in MR, which needs to be fixed.

  Some controllers will do the correct homing, even if a on a limit
  switch, and HOMF and HOMR have the same effect.
  Some controllers need this protection.
  Others not.
  Solution:
  setIntegerParam(pC_->motorFlagsHomeOnLs_, 1);

Encoder readback was crippled to 32 bit.
  See documentation/FeadbackDataflow.ppt
  commit 7a125b9c,
  "Make it possible to use encoder readback > 32 bit"

Motor stops while jogging.
  When the motor stops because of e.g. an internal soft limit,
  the state machine was confused: commit 81bbe334
  "Record recognizes motor stop while jogging"
  
asyn-based simulator, automated test cases
  Partly fixed:
  There is a simulator for the Ethercat based controllers.
  We can run against the simulator or real hardware.
  More test cases needed.

NTM not working as documented - Servo motor stopped at overshoot
  The documentation of the NTM said:
  "If NTM is "YES", the motor is immediately stopped and given a motion
  command to the new position".
  Actually, there was no code for this, the movement did always complete.
  The only code that was left was the stop at overshoot, which frequently
  confused users of servo motors.
  Remove the NTM/NTMF fields.
  If needed new code can be added later.
  
Minimal movements, deadband, MRES, ERES, RRES

  The current record was based on a stepper motor,
  and all postions are rounded to a "step".

  When the VAL field was updated, the position was converted
  into steps, counted as an integer "npos = NINT(newpos)".
  When the new position is very close to the actual position,
  and they are at the "same step" (in other words: too_small is true),
  the motor doesn't have to move at all.
  In fact, it can't move, and the record sets "dmov" to true directly.
  This may save some time, especially when the "auto-power-on" feature
  is used, and we need to wait for the amplifier to be turned on.

  Similar things should happen when an external encoder is used:
  The can be skipped if the new "encoder tick position" is the same
  as the old "encoder position".
  This is, however, not always working as expected:
  http://www.aps.anl.gov/epics/tech-talk/2015/msg01485.php
  As a solution the SDBD field was added, see below.
  
True deadband handling, SDBD
  "real" stepper motors can only be positioned at a whole step.
  Many MCU support "microstepping", or support brushless motors.
  There are many MCU that manage a motor in a closed-loop, when an encoder
  is used. The closed loop is sometimes called a servo motor.
  Here the step size is no longer important, as the motor can be positioned at
  "any position". The MCU uses enginering units to communicate with the IOC.
  All details about the motor are hidden using enginering units.
  As said before, they take the feedback of an external encoder,
  and close the position loop inside the controller.
  Visible to the outside world is a "deadband". As long as the motor stays
  inside the tolarance band, it is treated as "in position".

  Therefore the SDBD field has been add, to change
  the determination whether to move or not?

  /* At initialization */
  if (SDBD ==0)
    SDBD = MRES

  /* Do we need to move ? */
  if (fabs(delta(newPOS - oldPOS)) < SDBD)
    do nothing but signal dmov=0 ; dmov=1 trnasition
  else
     do_the_motion()
  
